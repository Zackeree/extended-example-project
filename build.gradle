buildscript {
	ext {
		kotlinVersion = '1.2.41'
		springBootVersion = '2.0.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
	jcenter()
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				includes = ['com.example.project.contract.*']
				// Ignore crud package since it currently isn't being used
				excludes = ['com.example.project.contract.crud']

				minimum = 0.7
			}

			rule {
				element = 'PACKAGE'
				includes = ['com.example.project.contract.*']
				// Ignore crud package since it currently isn't being used
				excludes = ['com.example.project.contract.crud']

				limit {
					counter = 'CLASS'
					value = 'COVEREDRATIO'
					minimum = 0.8
				}
			}
		}
	}
	dependsOn test
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')

	compile("au.com.console:kotlin-jpa-specification-dsl:0.1.0")
	compile('org.springframework.boot:spring-boot-starter-web')
	compile group: 'com.google.guava', name: 'guava', version: '19.0'
	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
	compile "org.jetbrains.kotlin:kotlin-reflect:1.2.41"
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')

	testCompile("com.h2database:h2")

	runtime('mysql:mysql-connector-java')
}

task verify(type: GradleBuild) {
	group 'Verification'
	description 'Verify the build by building, testing, and validation coverage ratio (80 or above).'
	tasks = ['build', 'test', 'jacocoTestCoverageVerification']
}
